{"version":3,"sources":["components/MainBody.jsx","components/AboutMe.jsx","components/ProjectCard.jsx","components/Project.jsx","components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["MainBody","props","toggleHover","data","newhoverStatus","state","hoverstatus","event","icon","id","setState","backgroundType","Configs","devInfo","devIntro","devDesc","icons","className","this","map","key","target","rel","href","url","image","onMouseEnter","onMouseLeave","role","Component","AboutMe","componentDidMount","handleRequest","e","axios","get","instaLink","instaUsername","instaQuerry","then","response","instaProfilePic","graphql","user","profile_pic_url_hd","catch","error","console","log","finally","heading","aboutDev","alt","src","ProjectCard","handleUpdatetime","date","Date","value","pushed_at","diff","getTime","hours","Math","trunc","updated_at","toString","day","getDate","monthIndex","getMonth","year","getFullYear","stargazers_count","download_url","svn_url","repo_url","name","description","homepage","class","languages_url","Language","array","total_count","index","push","language","Project","gitHubLink","gitHubUsername","gitHubQuerry","slice","projectsArray","filter","ele","project","Footer","bgStyle","backgroundColor","style","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a01302f7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Typist from \"react-typist\";\r\nimport \"../App\";\r\nimport Configs from \"../configurations.json\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\nclass MainBody extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      backgroundType: Configs.backgroundType,\r\n      devInfo: Configs.devIntro,\r\n      devDesc: Configs.devDesc,\r\n      hoverstatus: [\r\n        \"socialicons\",\r\n        \"socialicons\",\r\n        \"socialicons\",\r\n        \"socialicons\",\r\n        \"socialicons\"\r\n      ]\r\n    };\r\n  }\r\n\r\n  toggleHover = (data) => {\r\n    const newhoverStatus = [...this.state.hoverstatus];\r\n    if (data.event === \"enter\") {\r\n      newhoverStatus[data.icon.id] = \"socialiconshover\";\r\n      this.setState({ hoverstatus: newhoverStatus });\r\n    } else if (data.event === \"leave\") {\r\n      newhoverStatus[data.icon.id] = \"socialicons\";\r\n      this.setState({ hoverstatus: newhoverStatus });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const icons = Configs.icons;\r\n    return (\r\n      <div>\r\n        <div\r\n          id=\"divmainbody\"\r\n          className=\"jumbotron jumbotron-fluid bg-transparent bgstyle text-light min-vh-100 d-flex align-content-center align-items-center flex-wrap m-0\"\r\n        >\r\n          <div className=\" container container-fluid text-center \">\r\n            <h1 className=\"display-1\">{this.state.devInfo}</h1>\r\n            <Typist className=\"lead\"> {this.state.devDesc}</Typist>\r\n            <div className=\" p-5\">\r\n              {icons.map((icon) => (\r\n                <a\r\n                  key={icon.id}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  href={`${icon.url}`}\r\n                >\r\n                  <i\r\n                    className={`${icon.image}  fa-3x ${\r\n                      this.state.hoverstatus[icon.id]\r\n                    }`}\r\n                    onMouseEnter={() =>\r\n                      this.toggleHover({ icon: icon, event: \"enter\" })\r\n                    }\r\n                    onMouseLeave={() =>\r\n                      this.toggleHover({ icon: icon, event: \"leave\" })\r\n                    }\r\n                  />\r\n                </a>\r\n              ))}\r\n            </div>\r\n            <a\r\n              className=\"btn btn-outline-light btn-lg\"\r\n              href=\"#divaboutme\"\r\n              role=\"button\"\r\n            >\r\n              More about me\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainBody;\r\n","import React, { Component } from \"react\";\r\nimport Configs from \"../configurations.json\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport axios from \"axios\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\nimport './AboutMe.css'\r\nclass AboutMe extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      heading: \"About me\",\r\n      aboutDev: Configs.aboutDev,\r\n      instaProfilePic: \"bad request\"\r\n    };\r\n  }\r\n  componentDidMount = () => {\r\n    this.handleRequest();\r\n  };\r\n\r\n  handleRequest = (e) => {\r\n    axios\r\n      .get(Configs.instaLink + Configs.instaUsername + Configs.instaQuerry)\r\n      .then((response) => {\r\n        // handle success\r\n        // console.log(response.data.graphql);\r\n        this.setState({\r\n          instaProfilePic: response.data.graphql.user.profile_pic_url_hd\r\n        });\r\n      })\r\n      .catch(function (error) {\r\n        // handle error\r\n        console.log(error);\r\n      })\r\n      .finally(function () {\r\n        // always executed\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"divaboutme\" className=\"jumbotron jumbotron-fluid m-0\">\r\n        <div className=\" container container-fluid p-5\">\r\n          <div className=\"row\">\r\n            <div className=\" col-5 d-none d-lg-block align-self-center\">\r\n              <img\r\n                className=\"border-secondary rounded-circle myimage\"\r\n\r\n                alt=\"profilepicture\"\r\n                src=\"https://i.ibb.co/WfJSTbr/circle-cropped-1.png\"\r\n              ></img>\r\n            </div>\r\n            <div className=\" col-lg-7\">\r\n              <h1 className=\"display-4 mb-5 text-center\">\r\n                {this.state.heading}\r\n              </h1>\r\n              <p className=\" lead text-center\">{this.state.aboutDev}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AboutMe;\r\n","import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport axios from \"axios\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\nclass ProjectCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: this.props.value,\r\n      updated_at: \"0 mints\",\r\n      stargazers_count: this.props.value.stargazers_count,\r\n      download_url: this.props.value.svn_url + \"/archive/master.zip\",\r\n      repo_url: this.props.value.svn_url\r\n    };\r\n  }\r\n  componentDidMount = () => {\r\n    this.handleUpdatetime();\r\n  };\r\n\r\n  handleUpdatetime = () => {\r\n    const date = new Date(this.state.value.pushed_at);\r\n    const nowdate = new Date();\r\n    var diff = nowdate.getTime() - date.getTime();\r\n    var hours = Math.trunc(diff / 1000 / 60 / 60);\r\n    if (hours < 24) {\r\n      this.setState({ updated_at: hours.toString() + \" hours ago\" });\r\n    } else {\r\n      var monthNames = [\r\n        \"January\",\r\n        \"February\",\r\n        \"March\",\r\n        \"April\",\r\n        \"May\",\r\n        \"June\",\r\n        \"July\",\r\n        \"August\",\r\n        \"September\",\r\n        \"October\",\r\n        \"November\",\r\n        \"December\"\r\n      ];\r\n      var day = date.getDate();\r\n      var monthIndex = date.getMonth();\r\n      var year = date.getFullYear();\r\n      this.setState({\r\n        updated_at: \"on \" + day + \" \" + monthNames[monthIndex] + \" \" + year\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-md-6\">\r\n        <div className=\"card shadow-lg p-3 mb-5 bg-white rounded\">\r\n          {/* <img src=\"\" className=\"card-img-top\" alt=\"...\" /> */}\r\n          <div className=\"card-body\">\r\n            <h5 className=\"card-title\">{this.state.value.name} </h5>\r\n            <p className=\"card-text\">{this.state.value.description} </p>\r\n            <a\r\n              href={this.state.download_url}\r\n              className=\" btn btn-outline-secondary mr-3\"\r\n            >\r\n              <i className=\"fab fa-github\" /> Clone Project\r\n            </a>\r\n\r\n            <a\r\n              href={this.state.repo_url}\r\n              target=\" _blank\"\r\n              className=\" btn btn-outline-secondary\"\r\n            >\r\n              <i className=\"fab fa-github\" /> Repo\r\n            </a>\r\n            <br />\r\n            <br />\r\n            {this.props.value.homepage !== null && (\r\n              <a\r\n                href={this.props.value.homepage}\r\n                target=\" _blank\"\r\n                className=\" btn btn-outline-secondary\"\r\n              >\r\n                <i class=\"fa fa-eye\" />\r\n                <span>&nbsp;</span>Live\r\n              </a>\r\n            )}\r\n\r\n            <hr />\r\n            <Language value={this.state.value.languages_url}></Language>\r\n            <p className=\"card-text \">\r\n              <p href=\"\" className=\" text-dark card-link mr-4\">\r\n                <i className=\"fab fa-github\" /> Stars{\" \"}\r\n                <span className=\"badge badge-dark\">\r\n                  {this.state.stargazers_count}\r\n                </span>\r\n              </p>\r\n              <small className=\"text-muted\">\r\n                Updated {this.state.updated_at}\r\n              </small>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Language extends Component {\r\n  state = {\r\n    data: []\r\n  };\r\n  componentDidMount = () => {\r\n    this.handleRequest();\r\n  };\r\n\r\n  handleRequest = () => {\r\n    axios\r\n      .get(this.props.value)\r\n      .then((response) => {\r\n        // handle success\r\n        // console.log(response.data);\r\n        this.setState({ data: response.data });\r\n      })\r\n      .catch(function (error) {\r\n        // handle error\r\n        console.log(error);\r\n      })\r\n      .finally(function () {\r\n        // always executed\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const array = [];\r\n    var total_count = 0;\r\n    for (var index in this.state.data) {\r\n      array.push(index);\r\n      total_count = total_count + this.state.data[index];\r\n      // console.log(index, this.state.data[index]);\r\n    }\r\n    // console.log(\"array contains \", array, this.state.data[array[0]]);\r\n    return (\r\n      <div className=\"pb-3\">\r\n        Languages:{\" \"}\r\n        {array.map((language) => (\r\n          <p key={language} className=\"badge badge-light card-link\">\r\n            {language}:{\" \"}\r\n            {Math.trunc((this.state.data[language] / total_count) * 1000) / 10}{\" \"}\r\n            %\r\n          </p>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectCard;\r\n","import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\nimport Configs from \"../configurations.json\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport axios from \"axios\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\nimport ProjectCard from \"./ProjectCard\";\r\n\r\nclass Project extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      heading: \"Recent Projects\",\r\n      projectsArray: []\r\n    };\r\n  }\r\n  componentDidMount = () => {\r\n    this.handleRequest();\r\n  };\r\n\r\n  handleRequest = (e) => {\r\n    axios\r\n      .get(Configs.gitHubLink + Configs.gitHubUsername + Configs.gitHubQuerry)\r\n      .then((response) => {\r\n        // handle success\r\n        console.log(response.data.slice(0, 4));\r\n        this.setState({\r\n          projectsArray: response.data\r\n            .filter((ele) => ele.stargazers_count !== 0)\r\n            .slice(0, 6)\r\n        });\r\n      })\r\n      .catch(function (error) {\r\n        // handle error\r\n        console.log(error);\r\n      })\r\n      .finally(function () {\r\n        // always executed\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"divproject\"\r\n        className=\"jumbotron jumbotron-fluid bg-transparent m-0\"\r\n      >\r\n        <div className=\" container container-fluid p-5\">\r\n          <h1 className=\"display-4 pb-5\">{this.state.heading}</h1>\r\n          <div className=\" row\">\r\n            {this.state.projectsArray.map((project) => (\r\n              <ProjectCard\r\n                key={project.id}\r\n                id={project.id}\r\n                value={project}\r\n              ></ProjectCard>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Project;\r\n","import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\nclass Footer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      bgStyle: { backgroundColor: \"#f5f5f5\" }\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <footer style={this.state.bgStyle} className=\" mt-auto py-3 text-center\">\r\n        {/* <strong> &copy; 2020 </strong>*/}\r\n        <i className=\"fas fa-code\"></i> with <i className=\"fas fa-heart\"></i> by{\" \"}\r\n        <a\r\n          className=\" badge badge-dark\"\r\n          target=\"noopener\"\r\n          href={\"https://github.com/imnotharsha\"}\r\n        >\r\n          Harsha Dodderi\r\n        </a>\r\n        using <i className=\"fab fa-react\"></i>\r\n        <p>\r\n          <small className=\"text-muted\">\r\n\r\n            Project code is open source. Feel free to fork and make your own\r\n            version.\r\n          </small>\r\n        </p>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport MainBody from './components/MainBody';\r\nimport AboutMe from './components/AboutMe';\r\nimport Project from './components/Project';\r\nimport Footer from './components/Footer';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <MainBody />\r\n        <AboutMe />\r\n        <Project />\r\n\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}